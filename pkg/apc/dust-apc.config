#!/bin/bash

# Exit on error
set -e

# source debconf library
. /usr/share/debconf/confmodule

# this script is capable of backing up
db_version 2.0
db_capb backup
db_title "Configure dust-apc"

APCHOME=/opt/dust-apc
VOYHOME=/opt/dust-voyager

STATE=1
LAST_STATE=9
while [ "$STATE" != 0 -a "$STATE" != 10 ]; do
   case "$STATE" in
   1)
      # List all APC configurations
	  # select on the blank will create a new one
	  # select on existing will modify or delete
	  choice=""
	  for f in $APCHOME/etc/supervisor.conf.d/*.conf; do
	     [ -e "$f" ] && exist=true || exist=false
		 # one iteration is enough
		 break
	  done
	  if [ $exist = false ]; then
	     echo "file $FILE does not exist"
		 clientid=""
	  else
         for f in $APCHOME/etc/supervisor.conf.d/*.conf
	     do
	       line=$(grep -Po '(?<=program:)[^]]*' $f)
 	       choice="$choice, $line"
	     done
         db_title "Configue dust-apc"
	     db_subst dust-apc/apc_list CHOICES "$choice"
         db_input medium dust-apc/apc_list
         db_go
	     db_get dust-apc/apc_list
	     clientid="$RET"
	  fi
	 
	  if [ -z "$clientid" ] ; then
	     action="Create"
		 db_subst dust-apc/client-id operation $action
	     db_input medium dust-apc/client-id
	     db_go
         db_get dust-apc/client-id
         clientid="$RET"
		 if [ -z "$clientid" ] ; then
		    break
		 fi
		 db_title "Creating $clientid"
	  else
	     action="Modify"
		 clientid="$RET"
		 db_subst dust-apc/client-id operation $action
		 db_set dust-apc/client-id $clientid
	     db_input medium dust-apc/client-id
	     db_go
         db_get dust-apc/client-id
         newclientid="$RET"
		 # input blank client-id meaning delete it
		 if [ -z "$newclientid" ] ; then
		    action="Delete"
		 fi
		 db_title "Modifying $clientid"
	  fi
	  
	  case "$action" in 
	  "Create")
	     ;;
	  "Delete")
	     # skip all questions, jump to end
		 STATE=$(expr $LAST_STATE - 1)
         ;;
	  "Modify")
  	     # if file already exist, modify the existing configuration
         fconf="$APCHOME/conf/$clientid.conf"
         echo $fconf
	     if [ -f $fconf ]; then 
		    host=$(grep -Po '(?<=host=).*' $fconf)
		    if [ $host != '' ]
		    then
		       db_set dust-apc/host $host
		    fi

		    port=$(grep -Po '(?<=port=).*' $fconf)
            db_set dust-apc/port $port

   		    apidevice="$(grep -Po '(?<=api-device=).*' $fconf)"
		    db_set dust-apc/api-device $apidevice

		    resetdevice=$(grep -Po '(?<=reset-device=).*' $fconf)
 	        db_set dust-apc/reset-device $resetdevice

		    if [ -z $(grep -Po '(?<=api-proto=).*' $fconf) ] ; then
		        apiproto="ipc"
		    else
		        apiproto="$(grep -Po '(?<=api-proto=).*' $fconf)"
		    fi
 	        db_set dust-apc/api-proto $apiproto
	     fi
		 ;;
	  esac
	  
   ;;

   2)
      # Would you like to start APC automatically?
	  # 
      db_input medium dust-apc/start-apc || false
	  db_go
      db_get dust-apc/start-apc
      start="$RET"

	  # port-offset supports multiple APCs on the same host
      db_input medium dust-apc/port-offset
	  db_go
      db_get dust-apc/port-offset
      offset="$RET"
	  # test if offset is zero length
	  if [ -z "$offset" ]
	  then
	    portoffset=''
	  else
	    portoffset=":$offset"
	  fi
   ;;

   3)
      db_input low dust-apc/host || "localhost"
	  db_go
      db_get dust-apc/host
      host="$RET"

   ;;

   4)
      db_input low dust-apc/port || "9100"
	  db_go
      db_get dust-apc/port
      port="$RET"

   ;;

   5)
      db_input low dust-apc/api-device || "/dev/ttyUSB3"
	  db_go
      db_get dust-apc/api-device
      apidevice="$RET"

   ;;

   6)
      db_input low dust-apc/reset-device || "/dev/ttyUSB0"
	  db_go
      db_get dust-apc/reset-device
      resetdevice="$RET"

   ;;

   7)
      db_input low dust-apc/api-proto || "ipc"
	  db_go
      db_get dust-apc/api-proto
      apiproto="$RET"
   ;;
   
   8)
      db_title "Setup stunnel"
      db_input low dust-apc/stunnel
      db_go
      db_get dust-apc/stunnel
      stunnel="$RET"

      if [ "$stunnel" = true ] ; then
         db_input low dust-apc/stunnel_remote_host
         db_go
         db_get dust-apc/stunnel_remote_host
         stunnel_remote_host="$RET"
         if [ -n "$stunnel_remote_host" ] ; then
             $APCHOME/bin/update-apc-config.py stunnel \
                 --host $stunnel_remote_host
         fi
      fi
   ;;
   
   9)
      # done all questions, now process the command
      case "$action" in
          "Create")
              echo "creating configuration for $clientid"
              $APCHOME/bin/update-apc-config.py add \
                  --name $clientid \
                  --api-device $apidevice \
                  --reset-device $resetdevice
          ;;
          
          "Modify")
              echo "Modify configuration for $clientid"
              $APCHOME/bin/update-apc-config.py update \
                  --name $clientid \
                  --host $host \
                  --port $port \
                  --api-device $apidevice \
                  --reset-device $resetdevice
          ;;

          "Delete")
              echo "Delete configuration for $clientid"
              $APCHOME/bin/update-apc-config.py delete \
                  --name $clientid
          ;;
      esac

      echo "Apply changes to supervisor, this could take a few seconds ..."
      supervisorctl reread
      supervisorctl update
	  
	  STATE=0
   
   ;;
   esac

   if db_go; then
      STATE=$(($STATE + 1))
   else
      STATE=$(($STATE - 1))
   fi
done

db_stop

